[{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#073---june-13-2025","title":"Release notes > 0.7.3 - June 13, 2025","text":"0.7.3 - June 13, 2025\n\nFixed\n\n\n\n\n\nAdd token for the release-github action v10\n\n#304"},{"objectID":"Release notes","href":"changelog.html#072---june-13-2025","title":"Release notes > 0.7.2 - June 13, 2025","text":"0.7.2 - June 13, 2025\n\nMaintenance\n\n\n\n\n\nSupport the version 26R1 of the Ansys unified install\n\n#301"},{"objectID":"Release notes","href":"changelog.html#071---december-20-2024","title":"Release notes > 0.7.1 - December 20, 2024","text":"0.7.1 - December 20, 2024\n\nDocumentation\n\n\n\n\n\nUpdate docs with autoapi\n\n#252\n\nMaintenance\n\n\n\n\n\nUpdate error handling for path\n\n#261"},{"objectID":"Release notes","href":"changelog.html#070---november-13-2024","title":"Release notes > 0.7.0 - November 13, 2024","text":"0.7.0 - November 13, 2024\n\nMaintenance\n\n\n\n\n\nSupport the version 25.2 of the Ansys unified install\n\n#247"},{"objectID":"Release notes","href":"changelog.html#060---may-31-2024","title":"Release notes > 0.6.0 - May 31, 2024","text":"0.6.0 - May 31, 2024\n\nMaintenance\n\n\n\n\n\nSupport the version 25.1 of the Ansys unified install\n\n#193"},{"objectID":"Release notes","href":"changelog.html#050---april-2-2024","title":"Release notes > 0.5.0 - April 2, 2024","text":"0.5.0 - April 2, 2024\n\nAdded\n\n\n\n\n\nSupport arbitrary application names with “save” and “get”\n\n#164"},{"objectID":"Release notes","href":"changelog.html#040---november-17-2023","title":"Release notes > 0.4.0 - November 17, 2023","text":"0.4.0 - November 17, 2023\n\nMaintenance\n\n\n\n\n\nSupport the version 24.2 of the Ansys unified install\n\n#127\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/save/index.html#the-savepy-module","title":"The save.py module","text":"The save.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/save/index.html#summary","title":"The save.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\ncli\n\nCLI tool to store the path of a solver."},{"objectID":"Home","href":"api/ansys/tools/path/save/index.html#description","title":"The save.py module > Description","text":"Description\n\nConvenience CLI to save path for ansys application in configuration."},{"objectID":"Home","href":"api/ansys/tools/path/save/index.html#module-detail","title":"The save.py module > Module detail","text":"Module detail\n\n\n\nsave.cli(name: str, location: str, allow_prompt: bool)\n\nCLI tool to store the path of a solver.\n\nUSAGE:\n\nThe following example demonstrates the main use of this tool:\n\n$ save-ansys-path –name dyna /path/to/dyna\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/path/index.html#the-pathpy-module","title":"The path.py module","text":"The path.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/path/index.html#summary","title":"The path.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nget_available_ansys_installations\n\nReturn a dictionary of available Ansys unified installation versions with their base paths.\n\nfind_mechanical\n\nSearch for the Mechanical path in the standard installation location.\n\nfind_mapdl\n\nSearches for Ansys MAPDL path within the standard install location\n\nfind_dyna\n\nSearches for Ansys LS-Dyna path within the standard install location\n\nfind_ansys\n\nObsolete method, use find_mapdl.\n\nis_valid_executable_path\n\n\n\nchange_default_mapdl_path\n\nChange your default Ansys MAPDL path.\n\nchange_default_dyna_path\n\nChange your default Ansys LS-Dyna path.\n\nchange_default_mechanical_path\n\nChange your default Mechanical path.\n\nchange_default_ansys_path\n\nDeprecated, use change_default_mapdl_path instead\n\nsave_mechanical_path\n\nFind the Mechanical path or query user.\n\nsave_dyna_path\n\nFind Ansys LD-Dyna’s path or query user.\n\nsave_mapdl_path\n\nFind Ansys MAPDL’s path or query user.\n\nsave_ansys_path\n\nDeprecated, use save_mapdl_path instead\n\nclear_configuration\n\nClear the entry of the specified product in the configuration file\n\nget_saved_application_path\n\n\n\nget_mapdl_path\n\nAcquires Ansys MAPDL Path:\n\nget_dyna_path\n\nAcquires Ansys LS-Dyna Path from a cached file or user input\n\nget_ansys_path\n\nDeprecated, use get_mapdl_path instead\n\nget_mechanical_path\n\nAcquires Ansys Mechanical Path\n\nversion_from_path\n\nExtract the product version from a path.\n\nget_latest_ansys_installation\n\nReturn a tuple with the latest ansys installation version and its path\n\nAttributes\n\n\n\n\n\nlinux_default_dirs\n\n\n\nConstants\n\n\n\n\n\nPLUGINS\n\n\n\nLOG\n\n\n\nPRODUCT_TYPE\n\n\n\nSUPPORTED_VERSIONS_TYPE\n\n\n\nLINUX_DEFAULT_DIRS\n\n\n\nCONFIG_FILE_NAME\n\n\n\nSUPPORTED_ANSYS_VERSIONS\n\n\n\nPRODUCT_EXE_INFO\n\n\n\nSETTINGS_DIR\n\n\n\nCONFIG_FILE\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/path/index.html#module-detail","title":"The path.py module > Module detail","text":"Module detail\n\n\n\npath.get_available_ansys_installations(supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Dict[int, str]\n\nReturn a dictionary of available Ansys unified installation versions with their base paths.\n\nReturns\n\npython:dict[int: python:str]\n\nReturn all Ansys unified installations paths in Windows.\n\nNotes\n\nOn Windows, It uses the environment variable AWP_ROOTXXX.\n\nThe student versions are returned at the end of the dict and\nwith negative value for the version.\n\nExamples\n\n>>> from ansys.tools.path import get_available_ansys_installations\n>>> get_available_ansys_installations()\n{251: 'C:\\Program Files\\ANSYS Inc\\v251',\n 242: 'C:\\Program Files\\ANSYS Inc\\v242',\n -242: 'C:\\Program Files\\ANSYS Inc\\ANSYS Student\\v242'}\n\nReturn all installed Ansys paths in Linux.\n\n>>> get_available_ansys_installations()\n{251: '/usr/ansys_inc/v251',\n 242: '/usr/ansys_inc/v242',\n 241: '/usr/ansys_inc/v241'}\n\n\n\npath.find_mechanical(version: float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearch for the Mechanical path in the standard installation location.\n\nReturns\n\nmechanical_path\n\npython:str\n\nFull path to the executable file for the latest Mechanical version.\n\nversion\n\npython:float | python:str\n\nVersion in the float format. For example, 25.1 for 2025 R1.\nIf no version has be found, version is set to “”\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import find_mechanical\n>>> find_mechanical()\n('C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe', 25.1)\n\nOn Linux:\n\n>>> find_mechanical()\n('/usr/ansys_inc/v251/aisol/.workbench', 25.1)\n\n\n\npath.find_mapdl(version: int | float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearches for Ansys MAPDL path within the standard install location\nand returns the path of the latest version.\n\nParameters\n\nversion\n\npython:int, python:float, optional\n\nVersion of Ansys MAPDL to search for.\nIf using int, it should follow the convention XXY, where\nXX is the major version,\nand Y is the minor.\nIf using float, it should follow the convention XX.Y, where\nXX is the major version,\nand Y is the minor.\nIf None, use latest available version on the machine.\n\nReturns\n\nansys_path\n\npython:str\n\nFull path to ANSYS executable.\n\nversion\n\npython:float\n\nVersion float.  For example, 25.1 corresponds to 2025R1.\n\nExamples\n\nWithin Windows\n\n>>> from ansys.tools.path import find_mapdl\n>>> find_mapdl()\n'C:/Program Files/ANSYS Inc/v251/ANSYS/bin/winx64/ansys251.exe', 25.1\n\nWithin Linux\n\n>>> find_mapdl()\n(/usr/ansys_inc/v251/ansys/bin/ansys251, 25.1)\n\n\n\npath.find_dyna(version: int | float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nSearches for Ansys LS-Dyna path within the standard install location\nand returns the path of the latest version.\n\nParameters\n\nversion\n\npython:int, python:float, optional\n\nVersion of Ansys LS-Dyna to search for.\nIf using int, it should follow the convention XXY, where\nXX is the major version,\nand Y is the minor.\nIf using float, it should follow the convention XX.Y, where\nXX is the major version,\nand Y is the minor.\nIf None, use latest available version on the machine.\n\nReturns\n\nansys_path\n\npython:str\n\nFull path to Ansys LS-Dyna executable.\n\nversion\n\npython:float\n\nVersion float.  For example, 25.1 corresponds to 2025R1.\n\nExamples\n\nWithin Windows\n\n>>> from ansys.tools.path import find_dyna\n>>> find_dyna()\n'C:/Program Files/ANSYS Inc/v251/ANSYS/bin/winx64/LSDYNA251.exe', 25.1\n\nWithin Linux\n\n>>> find_dyna()\n(/usr/ansys_inc/v251/ansys/bin/lsdyna251, 25.1)\n\n\n\npath.find_ansys(version: float | None = None, supported_versions: SUPPORTED_VERSIONS_TYPE = SUPPORTED_ANSYS_VERSIONS) -> Tuple[str, float] | Tuple[Literal[''], Literal['']]\n\nObsolete method, use find_mapdl.\n\n\n\npath.is_valid_executable_path(product: PRODUCT_TYPE, exe_loc: str) -> bool\n\n\n\n\n\npath.change_default_mapdl_path(exe_loc: str) -> None\n\nChange your default Ansys MAPDL path.\n\nParameters\n\nexe_loc\n\npython:str\n\nAnsys MAPDL executable path.  Must be a full path.\n\nExamples\n\nChange default Ansys MAPDL location on Linux\n\n>>> from ansys.tools.path import change_default_mapdl_path, get_mapdl_path\n>>> change_default_mapdl_path('/ansys_inc/v251/ansys/bin/ansys251')\n>>> get_mapdl_path()\n'/ansys_inc/v251/ansys/bin/ansys251'\n\nChange default Ansys location on Windows\n\n>>> mapdl_path = 'C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/ANSYS251.exe'\n>>> change_default_mapdl_path(mapdl_path)\n\n\n\npath.change_default_dyna_path(exe_loc: str) -> None\n\nChange your default Ansys LS-Dyna path.\n\nParameters\n\nexe_loc\n\npython:str\n\npath to LS-Dyna executable. Must be a full path. This need not contain the name of the executable,\nbecause the name of the LS-Dyna executable depends on the precision.\n\nExamples\n\nChange default Ansys LS-Dyna location on Linux\n\n>>> from ansys.tools.path import change_default_dyna_path, get_dyna_path\n>>> change_default_dyna_path('/ansys_inc/v251/ansys/bin/lsdyna251')\n>>> get_dyna_path()\n'/ansys_inc/v251/ansys/bin/lsdyna251'\n\nChange default Ansys LS-Dyna location on Windows\n\n>>> dyna_path = 'C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/LSDYNA251.exe'\n>>> change_default_dyna_path(dyna_path)\n\n\n\npath.change_default_mechanical_path(exe_loc: str) -> None\n\nChange your default Mechanical path.\n\nParameters\n\nexe_loc\n\npython:str\n\nFull path for the Mechanical executable file to use.\n\nExamples\n\nOn Windows:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe')\n>>> get_mechanical_path()\n'C:/Program Files/ANSYS Inc/v251/aisol/bin/win64/AnsysWBU.exe'\n\nOn Linux:\n\n>>> from ansys.tools.path import change_default_mechanical_path, get_mechanical_path\n>>> change_default_mechanical_path('/ansys_inc/v251/aisol/.workbench')\n>>> get_mechanical_path()\n'/ansys_inc/v251/aisol/.workbench'\n\n\n\npath.change_default_ansys_path(exe_loc: str) -> None\n\nDeprecated, use change_default_mapdl_path instead\n\n\n\npath.save_mechanical_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind the Mechanical path or query user.\n\nParameters\n\nexe_loc\n\npython:str, optional\n\nPath for the Mechanical executable file (AnsysWBU.exe).\nThe default is None, in which case an attempt is made to\nobtain the path from the following sources in this order:\n\nThe default Mechanical paths (for example,\nC:/Program Files/Ansys Inc/vXXX/aisol/bin/AnsysWBU.exe)\n\nThe configuration file\n\nUser input\n\nIf a path is supplied, this method performs some checks. If the\nchecks are successful, it writes this path to the configuration\nfile.\n\nReturns\n\npython:str\n\nPath for the Mechanical executable file.\n\nNotes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\n\nYou can change the default for the exe_loc parameter either by modifying the\nconfig.txt file or by running this code:\n\n\n\npath.save_dyna_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind Ansys LD-Dyna’s path or query user.\n\nIf no exe_loc argument is supplied, this function attempt\nto obtain the Ansys LS-Dyna executable from (and in order):\n\nThe default ansys paths (i.e. 'C:/Program Files/Ansys Inc/vXXX/ansys/bin/winx64/LSDYNAXXX')\n\nThe configuration file\n\nUser input\n\nIf exe_loc is supplied, this function does some checks.\nIf successful, it will write that exe_loc into the config file.\n\nParameters\n\nexe_loc\n\npython:str, optional\n\nPath of the LS-Dyna executable (‘lsdynaXXX’), by default None.\n\nReturns\n\npython:str\n\nPath of the LS-Dyna executable.\n\nNotes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\n\nExamples\n\nYou can change the default exe_loc either by modifying the mentioned\nconfig.txt file or by executing:\n\n>>> from ansys.tools.path import save_dyna_path\n>>> save_dyna_path('/new/path/to/executable')\n\n\n\npath.save_mapdl_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nFind Ansys MAPDL’s path or query user.\n\nIf no exe_loc argument is supplied, this function attempt\nto obtain the Ansys MAPDL executable from (and in order):\n\nThe default ansys paths (i.e. 'C:/Program Files/Ansys Inc/vXXX/ansys/bin/winx64/ansysXXX')\n\nThe configuration file\n\nUser input\n\nIf exe_loc is supplied, this function does some checks.\nIf successful, it will write that exe_loc into the config file.\n\nParameters\n\nexe_loc\n\npython:str, optional\n\nPath of the MAPDL executable (‘ansysXXX’), by default None.\n\nReturns\n\npython:str\n\nPath of the MAPDL executable.\n\nNotes\n\nThe location of the configuration file config.txt can be found in\nansys.tools.path.SETTINGS_DIR. For example:\n\nExamples\n\nYou can change the default exe_loc either by modifying the mentioned\nconfig.txt file or by executing:\n\n>>> from ansys.tools.path import save_mapdl_path\n>>> save_mapdl_path('/new/path/to/executable')\n\n\n\npath.save_ansys_path(exe_loc: str | None = None, allow_prompt: bool = True) -> str\n\nDeprecated, use save_mapdl_path instead\n\n\n\npath.clear_configuration(product: PRODUCT_TYPE | Literal['all']) -> None\n\nClear the entry of the specified product in the configuration file\n\n\n\npath.get_saved_application_path(application: str) -> str | None\n\n\n\n\n\npath.get_mapdl_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires Ansys MAPDL Path:\n\nFirst, it looks in the configuration file, used by save_mapdl_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\nParameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys MAPDL path.  The default is True.\n\nversion\n\npython:float, optional\n\nVersion of Ansys MAPDL to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\n\n\n\npath.get_dyna_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires Ansys LS-Dyna Path from a cached file or user input\n\nFirst, it looks in the configuration file, used by save_dyna_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\nParameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys LS-Dyna path.  The default is True.\n\nversion\n\npython:float, optional\n\nVersion of Ansys LS-Dyna to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\n\n\n\npath.get_ansys_path(allow_input: bool = True, version: float | None = None) -> str | None\n\nDeprecated, use get_mapdl_path instead\n\n\n\npath.get_mechanical_path(allow_input: bool = True, version: float | None = None, find: bool = True) -> str | None\n\nAcquires Ansys Mechanical Path\n\nFirst, it looks in the configuration file, used by save_mechanical_path\nThen, it tries to find it based on conventions for where it usually is.\nLastly, it takes user input\n\nParameters\n\nallow_input\n\nbool, optional\n\nAllow user input to find Ansys Mechanical path.  The default is True.\n\nversion\n\npython:float, optional\n\nVersion of Ansys Mechanical to search for. For example version=25.1.\nIf None, use latest.\n\nfind: bool, optional\n\nAllow ansys-tools-path to search for Ansys Mechanical in typical installation locations\n\n\n\npath.version_from_path(product: PRODUCT_TYPE, path: str) -> int\n\nExtract the product version from a path.\n\nParameters\n\npath\n\npython:str\n\nThe path to the Ansys executable. For example:\n\nMechanical:\n- Windows: C:/Program Files/ANSYS Inc/v251/aisol/bin/winx64/AnsysWBU.exe\n- Linux: /usr/ansys_inc/v251/aisol/.workbench\n\nMAPDL:\n- Windows: C:/Program Files/ANSYS Inc/v251/ansys/bin/winx64/ANSYS251.exe\n- Linux: /usr/ansys_inc/v251/ansys/bin/mapdl\n\nproduct: PRODUCT_TYPE\n\nThe product. For example: mapdl, mechanical, or dyna.\n\nReturns\n\npython:int\n\nInteger version number (for example, 251).\n\n\n\npath.get_latest_ansys_installation() -> Tuple[int, str]\n\nReturn a tuple with the latest ansys installation version and its path\n\nIf there is a student version and a regular installation for the latest release, the regular one is returned\n\nReturns\n\nTuple[python:int, python:str]\n\nTuple with the latest version and path of the installation\n\nRaises\n\nValueError\n\nNo Ansys installation found\n\n\n\npath.PLUGINS: Dict[str, ansys.tools.path.applications.ApplicationPlugin]\n\n\n\n\n\npath.LOG\n\n\n\n\n\npath.PRODUCT_TYPE\n\n\n\n\n\npath.SUPPORTED_VERSIONS_TYPE\n\n\n\n\n\npath.LINUX_DEFAULT_DIRS\n\n\n\n\n\npath.CONFIG_FILE_NAME = 'config.txt'\n\n\n\n\n\npath.SUPPORTED_ANSYS_VERSIONS: SUPPORTED_VERSIONS_TYPE\n\n\n\n\n\npath.PRODUCT_EXE_INFO\n\n\n\n\n\npath.SETTINGS_DIR\n\n\n\n\n\npath.CONFIG_FILE\n\n\n\n\n\npath.linux_default_dirs = [['/', 'usr', 'ansys_inc'], ['/', 'ansys_inc'], ['/', 'install', 'ansys_inc']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/index.html#the-applications-package","title":"The applications package","text":"The applications package\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/index.html#summary","title":"The applications package > Summary","text":"Summary\n\nSubmodules\n\n\n\n\n\ndyna\n\ndyna-specific logic for ansys-tools-path.\n\nmapdl\n\nMAPDL-specific logic for ansys-tools-path.\n\nmechanical\n\nMechanical-specific logic for ansys-tools-path.\n\nClasses\n\n\n\n\n\nApplicationPlugin\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/index.html#description","title":"The applications package > Description","text":"Description\n\nApplication plugin for ansys-tools-path.\n\nThis defines the interface of a plugin, which is implemented using a module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/misc/index.html#the-miscpy-module","title":"The misc.py module","text":"The misc.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/misc/index.html#summary","title":"The misc.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_float\n\nReturns true when a string can be converted to a float\n\nis_windows\n\nCheck if the host machine is on Windows.\n\nis_linux\n\nCheck if the host machine is Linux."},{"objectID":"Home","href":"api/ansys/tools/path/misc/index.html#description","title":"The misc.py module > Description","text":"Description\n\nMiscellaneous functions used by ansys-tools-path."},{"objectID":"Home","href":"api/ansys/tools/path/misc/index.html#module-detail","title":"The misc.py module > Module detail","text":"Module detail\n\n\n\nmisc.is_float(input_string: str) -> bool\n\nReturns true when a string can be converted to a float\n\n\n\nmisc.is_windows() -> bool\n\nCheck if the host machine is on Windows.\n\nReturns\n\nTrue if the host machine is on Windows, False otherwise.\n\n\n\n\n\nmisc.is_linux() -> bool\n\nCheck if the host machine is Linux.\n\nReturns\n\nTrue if the host machine is Linux, False otherwise.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes ansys-tools-path endpoints, their capabilities, and how\nto interact with them programmatically.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/index.html#the-ansystoolspath-library","title":"The ansys.tools.path library","text":"The ansys.tools.path library\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/index.html#summary","title":"The ansys.tools.path library > Summary","text":"Summary\n\nSubpackages\n\n\n\n\n\napplications\n\nApplication plugin for ansys-tools-path.\n\nSubmodules\n\n\n\n\n\nmisc\n\nMiscellaneous functions used by ansys-tools-path.\n\npath\n\n\n\nsave\n\nConvenience CLI to save path for ansys application in configuration.\n\nFunctions\n\n\n\n\n\nchange_default_dyna_path\n\nChange your default Ansys LS-Dyna path.\n\nchange_default_mapdl_path\n\nChange your default Ansys MAPDL path.\n\nchange_default_mechanical_path\n\nChange your default Mechanical path.\n\nclear_configuration\n\nClear the entry of the specified product in the configuration file\n\nfind_dyna\n\nSearches for Ansys LS-Dyna path within the standard install location\n\nfind_mapdl\n\nSearches for Ansys MAPDL path within the standard install location\n\nfind_mechanical\n\nSearch for the Mechanical path in the standard installation location.\n\nget_available_ansys_installations\n\nReturn a dictionary of available Ansys unified installation versions with their base paths.\n\nget_dyna_path\n\nAcquires Ansys LS-Dyna Path from a cached file or user input\n\nget_latest_ansys_installation\n\nReturn a tuple with the latest ansys installation version and its path\n\nget_mapdl_path\n\nAcquires Ansys MAPDL Path:\n\nget_mechanical_path\n\nAcquires Ansys Mechanical Path\n\nget_saved_application_path\n\n\n\nsave_dyna_path\n\nFind Ansys LD-Dyna’s path or query user.\n\nsave_mapdl_path\n\nFind Ansys MAPDL’s path or query user.\n\nsave_mechanical_path\n\nFind the Mechanical path or query user.\n\nversion_from_path\n\nExtract the product version from a path.\n\nchange_default_ansys_path\n\nDeprecated, use change_default_mapdl_path instead\n\nfind_ansys\n\nObsolete method, use find_mapdl.\n\nget_ansys_path\n\nDeprecated, use get_mapdl_path instead\n\nsave_ansys_path\n\nDeprecated, use save_mapdl_path instead\n\nConstants\n\n\n\n\n\nLOG\n\n\n\nSETTINGS_DIR\n\n\n\nSUPPORTED_ANSYS_VERSIONS\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/index.html#description","title":"The ansys.tools.path library > Description","text":"Description\n\nTools to find/cache installed Ansys products.\n\nWARNING: This is not concurrent-safe (multiple python processes might race on this data.)"},{"objectID":"Home","href":"api/ansys/tools/path/index.html#module-detail","title":"The ansys.tools.path library > Module detail","text":"Module detail\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"index.html#ansys-tools-path-a-tool-to-locate-ansys-products","title":"ansys-tools-path: A tool to locate Ansys products","text":"ansys-tools-path: A tool to locate Ansys products"},{"objectID":"Home","href":"index.html#how-to-install","title":"ansys-tools-path: A tool to locate Ansys products > How to install","text":"How to install\n\nIn order to install ansys-tools-path, make sure you\nhave the latest version of pip. To do so, run:\n\nThen, you can simply execute:"},{"objectID":"Home","href":"index.html#how-to-use","title":"ansys-tools-path: A tool to locate Ansys products > How to use","text":"How to use\n\nYou can use any of the functions available in the\nto identify the path of the local Ansys installation.\n\nFor example you can use find_ansys\nto locate the path of the latest Ansys installation available:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contributing","href":"contribute.html#contributing","title":"Contributing","text":"Contributing"},{"objectID":"Contributing","href":"contribute.html#how-to-install","title":"Contributing > How to install","text":"How to install\n\nAt least two installation modes are provided: user and developer."},{"objectID":"Contributing","href":"contribute.html#for-users","title":"Contributing > For users","text":"For users\n\nIn order to install ansys-tools-path, make sure you\nhave the latest version of pip. To do so, run:\n\nThen, you can simply execute:"},{"objectID":"Contributing","href":"contribute.html#for-developers","title":"Contributing > For developers","text":"For developers\n\nInstalling ansys-tools-path in developer mode allows\nyou to modify the source and enhance it.\n\nBefore contributing to the project, please refer to the PyAnsys Developer’s guide.\nYou need to follow these steps:\n\nStart by cloning this repository:\n\nCreate a fresh-clean Python environment and activate it:\n\nMake sure you have the latest required build system and doc, testing, and CI tools:\n\nInstall the project in editable mode:"},{"objectID":"Contributing","href":"contribute.html#how-to-testing","title":"Contributing > How to testing","text":"How to testing\n\nIf required, you can always call the style commands (black, isort,\nflake8…) or unit testing ones (pytest) from the command line. However,\nthis does not guarantee that your project is being tested in an isolated\nenvironment, which is the reason why tools like tox exist."},{"objectID":"Contributing","href":"contribute.html#a-note-on-pre-commit","title":"Contributing > A note on pre-commit","text":"A note on pre-commit\n\nThe style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool via:"},{"objectID":"Contributing","href":"contribute.html#documentation","title":"Contributing > Documentation","text":"Documentation\n\nFor building documentation, you can either run the usual rules provided in the\nSphinx Makefile, such us:"},{"objectID":"Contributing","href":"contribute.html#distributing","title":"Contributing > Distributing","text":"Distributing\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/ApplicationPlugin.html#applicationplugin","title":"ApplicationPlugin","text":"ApplicationPlugin\n\n\n\nclass ansys.tools.path.applications.ApplicationPlugin\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/ApplicationPlugin.html#overview","title":"ApplicationPlugin > Overview","text":"Overview\n\nMethods\n\n\n\n\n\nis_valid_executable_path\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/ApplicationPlugin.html#import-detail","title":"ApplicationPlugin > Import detail","text":"Import detail"},{"objectID":"Home","href":"api/ansys/tools/path/applications/ApplicationPlugin.html#method-detail","title":"ApplicationPlugin > Method detail","text":"Method detail\n\n\n\nApplicationPlugin.is_valid_executable_path() -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mechanical/index.html#the-mechanicalpy-module","title":"The mechanical.py module","text":"The mechanical.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mechanical/index.html#summary","title":"The mechanical.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mechanical/index.html#description","title":"The mechanical.py module > Description","text":"Description\n\nMechanical-specific logic for ansys-tools-path."},{"objectID":"Home","href":"api/ansys/tools/path/applications/mechanical/index.html#module-detail","title":"The mechanical.py module > Module detail","text":"Module detail\n\n\n\nmechanical.is_valid_executable_path(exe_loc: str) -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/dyna/index.html#the-dynapy-module","title":"The dyna.py module","text":"The dyna.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/dyna/index.html#summary","title":"The dyna.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/dyna/index.html#description","title":"The dyna.py module > Description","text":"Description\n\ndyna-specific logic for ansys-tools-path."},{"objectID":"Home","href":"api/ansys/tools/path/applications/dyna/index.html#module-detail","title":"The dyna.py module > Module detail","text":"Module detail\n\n\n\ndyna.is_valid_executable_path(exe_loc: str) -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mapdl/index.html#the-mapdlpy-module","title":"The mapdl.py module","text":"The mapdl.py module\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mapdl/index.html#summary","title":"The mapdl.py module > Summary","text":"Summary\n\nFunctions\n\n\n\n\n\nis_valid_executable_path\n\n"},{"objectID":"Home","href":"api/ansys/tools/path/applications/mapdl/index.html#description","title":"The mapdl.py module > Description","text":"Description\n\nMAPDL-specific logic for ansys-tools-path."},{"objectID":"Home","href":"api/ansys/tools/path/applications/mapdl/index.html#module-detail","title":"The mapdl.py module > Module detail","text":"Module detail\n\n\n\nmapdl.is_valid_executable_path(exe_loc: str) -> bool\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]